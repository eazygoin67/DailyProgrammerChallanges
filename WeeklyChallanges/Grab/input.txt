C (/'si?/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, 
lexical variable scope and recursion, while a static type system prevents many unintended operations. 
By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in 
applications that had formerly been coded in assembly language, including operating systems, as well as various application 
software for computers ranging from supercomputers to embedded systems.

C was originally developed by Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs,[5] and used to re-implement the Unix 
operating system.[6] It has since become one of the most widely used programming languages of all time,[7][8] with C compilers 
from various vendors available for the majority of existing computer architectures and operating systems. C has been standardized 
by the American National Standards Institute (ANSI) since 1989 (see ANSI C) and subsequently by the International Organization 
for Standardization (ISO).

C is an imperative (procedural) language. It was designed to be compiled using a relatively straightforward compiler, to provide 
low-level access to memory, to provide language constructs that map efficiently to machine instructions, and to require minimal 
run-time support. C was therefore useful for many applications that had formerly been coded in assembly language, such as in 
system programming.

Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant and 
portably written C program can be compiled for a very wide variety of computer platforms and operating systems with few changes 
to its source code. The language has become available on a very wide range of platforms, from embedded microcontrollers to 
supercomputers.

Like most imperative languages in the ALGOL tradition, C has facilities for structured programming and allows lexical variable scope and recursion, while a static type system prevents many unintended operations. In C, all executable code is contained within subroutines, which are called "functions" (although not in the strict sense of functional programming). Function parameters are always passed by value. Pass-by-reference is simulated in C by explicitly passing pointer values. C program source text is free-format, using the semicolon as a statement terminator and curly braces for grouping blocks of statements.

The C language also exhibits the following characteristics:

There is a small, fixed number of keywords, including a full set of flow of control primitives: for, if/else, while, switch, and 
do/while. There is one namespace, and user-defined names are not distinguished from keywords by any kind of sigil.

There are a large number of arithmetical and logical operators, such as +, +=, ++, &, ~, etc.
	More than one assignment may be performed in a single statement.

	Function return values can be ignored when not needed.

	Typing is static, but weakly enforced: all data has a type, but implicit conversions can be performed; for instance, 
	characters can be used as integers.

	Declaration syntax mimics usage context. C has no "define" keyword; instead, a statement beginning with the name of a type 
	is taken as a declaration. There is no "function" keyword; instead, a function is indicated by the parentheses of an 
	argument list.

	User-defined (typedef) and compound types are possible.

	Heterogeneous aggregate data types (struct) allow related data elements to be accessed and assigned as a unit.

	Array indexing is a secondary notation, defined in terms of pointer arithmetic. Unlike structs, arrays are not first-class 
	objects; they cannot be assigned or compared using single built-in operators. There is no "array" keyword, in use or 
	definition; instead, square brackets indicate arrays syntactically, for example month[11].

	Enumerated types are possible with the enum keyword. They are not tagged, and are freely interconvertible with integers.

	Strings are not a separate data type, but are conventionally implemented as null-terminated arrays of characters.

	Low-level access to computer memory is possible by converting machine addresses to typed pointers.

	Procedures (subroutines not returning values) are a special case of function, with an untyped return type void.

	Functions may not be defined within the lexical scope of other functions.

	Function and data pointers permit ad hoc run-time polymorphism.

	A preprocessor performs macro definition, source code file inclusion, and conditional compilation.

	There is a basic form of modularity: files can be compiled separately and linked together, with control over which 
	functions and data objects are visible to other files via static and extern attributes.

	Complex functionality such as I/O, string manipulation, and mathematical functions are consistently delegated to library 
	routines.

C does not include some features found in newer, more modern high-level languages, including object orientation and garbage 
collection.

Many later languages have borrowed directly or indirectly from C, including C++, D, Go, Rust, Java, JavaScript, Limbo, LPC, C#, 
Objective-C, Perl, PHP, Python, Verilog (hardware description language),[4] and Unix's C shell. These languages have drawn many of 
their control structures and other basic features from C. Most of them (with Python being the most dramatic exception) are also 
very syntactically similar to C in general, and they tend to combine the recognizable expression and statement syntax of C with 
underlying type systems, data models, and semantics that can be radically different.

The origin of C is closely tied to the development of the Unix operating system, originally implemented in assembly language on a 
PDP-7 by Ritchie and Thompson, incorporating several ideas from colleagues. Eventually they decided to port the operating system 
to a PDP-11. The original PDP-11 version of Unix was developed in assembly language. The developers were considering to rewrite 
the system using the B language, Thompson's simplified version of BCPL.[9] However B's inability to take advantage of some of the 
PDP-11's features, notably byte addressability, led to C.

The development of C started in 1972 on the PDP-11 Unix system,[10] and first appeared in Version 2 Unix.[11] The language was 
not initially designed with portability in mind, but soon ran on different platforms as well: a compiler for the Honeywell 6000 
was written within the first year of C's history, while an IBM System/370 port followed soon.[1][10] The name of C simply 
continued the alphabetic order started by B.[12]

Also in 1972, a large part of Unix was rewritten in C.[13] By 1973, with the addition of struct types, the C language had become 
powerful enough that most of the Unix's kernel was now in C.

Unix was one of the first operating system kernels implemented in a language other than assembly. (Earlier instances include the 
Multics system (written in PL/I), and MCP (Master Control Program) for the Burroughs B5000 written in ALGOL in 1961.) Circa 1977, 
further changes to the language were made by Ritchie and Stephen C. Johnson to facilitate portability of the Unix operating system. 
Johnson's Portable C Compiler served as the basis for several implementations of C on new platforms.[10]

